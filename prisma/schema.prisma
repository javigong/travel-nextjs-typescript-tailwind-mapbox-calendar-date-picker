datasource db {
  // provider = "sqlite"
  provider= "cockroachdb"
  url      = env("DATABASE_URL")

  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow

  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Hotel {
  id          String @id @default(cuid())
  hotelId     String
  description String
  img         String
  lat         Float
  location    String
  long        Float
  price       String
  star        Float
  title       String
  total       Float
  userEmail   String
  cityId      String
  user        User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@unique([hotelId, userEmail])
}

model Booking {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  userEmail   String
  sessionId   String   @unique
  amountTotal Float
  images      String
  user        User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favorites     Hotel[]
  Booking       Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
